# coding: utf-8

"""
    barcodeapi

    Barcode APIs let you generate barcode images, and recognize values from images of barcodes.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BarcodeScanQRAdvancedResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'successful': 'bool',
        'result_barcodes': 'list[BarcodeQRResultItem]',
        'barcode_count': 'int',
        'error_message': 'str'
    }

    attribute_map = {
        'successful': 'Successful',
        'result_barcodes': 'ResultBarcodes',
        'barcode_count': 'BarcodeCount',
        'error_message': 'ErrorMessage'
    }

    def __init__(self, successful=None, result_barcodes=None, barcode_count=None, error_message=None):  # noqa: E501
        """BarcodeScanQRAdvancedResult - a model defined in Swagger"""  # noqa: E501

        self._successful = None
        self._result_barcodes = None
        self._barcode_count = None
        self._error_message = None
        self.discriminator = None

        if successful is not None:
            self.successful = successful
        if result_barcodes is not None:
            self.result_barcodes = result_barcodes
        if barcode_count is not None:
            self.barcode_count = barcode_count
        if error_message is not None:
            self.error_message = error_message

    @property
    def successful(self):
        """Gets the successful of this BarcodeScanQRAdvancedResult.  # noqa: E501

        True if the operation was successful, false otherwise  # noqa: E501

        :return: The successful of this BarcodeScanQRAdvancedResult.  # noqa: E501
        :rtype: bool
        """
        return self._successful

    @successful.setter
    def successful(self, successful):
        """Sets the successful of this BarcodeScanQRAdvancedResult.

        True if the operation was successful, false otherwise  # noqa: E501

        :param successful: The successful of this BarcodeScanQRAdvancedResult.  # noqa: E501
        :type: bool
        """

        self._successful = successful

    @property
    def result_barcodes(self):
        """Gets the result_barcodes of this BarcodeScanQRAdvancedResult.  # noqa: E501

        Results of performing the QR barcode scan operation  # noqa: E501

        :return: The result_barcodes of this BarcodeScanQRAdvancedResult.  # noqa: E501
        :rtype: list[BarcodeQRResultItem]
        """
        return self._result_barcodes

    @result_barcodes.setter
    def result_barcodes(self, result_barcodes):
        """Sets the result_barcodes of this BarcodeScanQRAdvancedResult.

        Results of performing the QR barcode scan operation  # noqa: E501

        :param result_barcodes: The result_barcodes of this BarcodeScanQRAdvancedResult.  # noqa: E501
        :type: list[BarcodeQRResultItem]
        """

        self._result_barcodes = result_barcodes

    @property
    def barcode_count(self):
        """Gets the barcode_count of this BarcodeScanQRAdvancedResult.  # noqa: E501

        Number of barcodes read  # noqa: E501

        :return: The barcode_count of this BarcodeScanQRAdvancedResult.  # noqa: E501
        :rtype: int
        """
        return self._barcode_count

    @barcode_count.setter
    def barcode_count(self, barcode_count):
        """Sets the barcode_count of this BarcodeScanQRAdvancedResult.

        Number of barcodes read  # noqa: E501

        :param barcode_count: The barcode_count of this BarcodeScanQRAdvancedResult.  # noqa: E501
        :type: int
        """

        self._barcode_count = barcode_count

    @property
    def error_message(self):
        """Gets the error_message of this BarcodeScanQRAdvancedResult.  # noqa: E501

        Error message if any  # noqa: E501

        :return: The error_message of this BarcodeScanQRAdvancedResult.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this BarcodeScanQRAdvancedResult.

        Error message if any  # noqa: E501

        :param error_message: The error_message of this BarcodeScanQRAdvancedResult.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BarcodeScanQRAdvancedResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BarcodeScanQRAdvancedResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
